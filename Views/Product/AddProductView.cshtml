@{
    ViewData["Title"] = "Add Product";
}

@model EcomSiteMVC.Models.Entities.Product; // Model is necessary if you want to make the update page here as well. else not necessary.

<style>
    .product-image-container {
        position: relative;
        display: inline-block;
        width: 150px;
        height: 150px;
        margin-bottom: 1rem;
    }

    .product-picture {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        object-fit: cover;
        cursor: pointer;
        border: 2px solid #ccc;
        transition: border-color 0.3s ease;
    }

        .product-picture:hover {
            border-color: #007bff;
        }

    .file-input {
        display: none;
    }

    .add-image-text {
        position: absolute;
        top: 85%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: #007bff;
        font-size: 0.8rem;
        font-weight: bold;
        text-align: center;
        pointer-events: none;
    }

    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        max-height: 225px;
        overflow-y: auto;
    }

    .image-preview {
        position: relative;
        margin: 5px;
    }

    .remove-image {
        position: absolute;
        top: 0;
        right: 0;
        background-color: red;
        color: white;
        padding: 1px;
        cursor: pointer;
        border-radius: 100%;
        font-size: 20px;
    }
</style>

<h2>@(Model == null ? "Add Product" : "Update Product")</h2>

@* asp-for ko satta name nai use garda hunxa, only if yeuta page le specific kaam matra garxa
eg: AddProduct page le product add matra garne ho vaye chai AddProductDTO ko model halera tesma asp-for use garda hunxa
it makes it secure.
*@

<div class="table-responsive p-4 mx-auto">
    <form asp-action="@(Model == null ? "AddProduct" : "UpdateProduct")" method="post" enctype="multipart/form-data">
        @if (Model != null)
        {
            <input type="hidden" name="ProductId" value="@Model.ProductId" />
        }
        <div class="form-group text-center mb-2 position-relative">
            <div class="product-image-container">
                <img src="~/images/default-profile.png" alt="Product Picture" class="product-picture" id="productImage" />
                <span id="addImageText" class="add-image-text w-100 ">Add Image</span>
            </div>
            <input type="file" name="Images" id="fileInput" class="file-input border" accept="image/*" multiple />
            <span class="text-danger"></span>
        </div>

        <!-- Display selected image previews -->
        <div class="image-preview-container" id="imagePreviewContainer"></div>

        <div class="form-group mb-3">
            <input name="ProductName" placeholder="Product Name" class="form-control" value="@(Model != null ? Model.ProductName : string.Empty)" required />
        </div>

        <div class="form-group mb-3">
            <textarea name="Description" placeholder="Description" class="form-control" required>@(Model != null ? Model.Description : string.Empty)</textarea>
        </div>

        <div class="form-group mb-3">
            <select name="CategoryId" class="form-select" asp-items="@(new SelectList(ViewBag.CategoryList, "Value", "Text", Model?.CategoryId))" required>
                <option value="">-- Select Category --</option>
            </select>
        </div>

        <div class="form-group mb-3">
            <input type="number" name="Price" placeholder="Price" class="form-control" value="@(Model != null ? Model.Price : null)" required />
        </div>

        <div class="form-group mb-3">
            <input type="number" name="StockQuantity" placeholder="Stock Quantity" class="form-control" value="@(Model != null ? Model.StockQuantity : string.Empty)" required />
        </div>

        <button type="submit" class="btn btn-primary">@(Model == null ? "Add Product" : "Update Product")</button>
    </form>
</div>

<script>
    // Open file input when profile picture is clicked
    document.getElementById('productImage').addEventListener('click', function () {
        document.getElementById('fileInput').click();
    });

    // Display selected images in preview container
    document.getElementById('fileInput').addEventListener('change', function (event) {
        const files = event.target.files;
        const previewContainer = document.getElementById('imagePreviewContainer');
        previewContainer.innerHTML = ''; // Clear existing previews

        // Loop through selected files and show previews
        Array.from(files).forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function (e) {
                const div = document.createElement('div');
                div.classList.add('image-preview');
                div.innerHTML = `
                        <img src="${e.target.result}" alt="Image Preview" style="width: 150px; height: 100px; border-radius: 8px; object-fit: cover;" />
                        <span class="remove-image material-symbols-outlined" onclick="removeImage(${index})">close</span>
                        `;
                previewContainer.appendChild(div);
            };
            reader.readAsDataURL(file);
        });
    });

    // Remove image preview from the UI (not from form)
    function removeImage(index) {
        const previewContainer = document.getElementById('imagePreviewContainer');
        previewContainer.children[index].remove();
        const input = document.getElementById('fileInput');
        const files = Array.from(input.files);
        files.splice(index, 1);
        input.files = new FileList(...files);
    }
</script>
